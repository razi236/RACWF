module ABS.ResourceManager;
import * from ABS.StdLib;
export *;
data Quality = Ferry | Doctor | SmokeMask | PoliceMan | Clerk | EODTech | FireFighter | FireExt | FirstAidBox;

// Resource Management
// Translation fetches resources from the database and store them in a resource map in the ABS program.
// The following code helps to add, acquire and release the resources.
data Availability = Free | Busy;
interface ResourceManager {
    List<Int> addRes(List<Pair<Int,Quality>> newResources);
    List<Int> holdRes(List<Pair<Int,Quality>> wantedResources);
    List<Int> findRes(Pair<Int,Quality> wantedResource);
    List<Int> findMoreEfficientRes(Pair<Int,Quality> wantedResource);
    List<Int> findNearestMoreEfficientRes(Pair<Int,Quality> wantedResource);
    List<Int> findLessEfficientRes(Pair<Int,Quality> wantedResource);
    List<Pair<Int,Int>> findNearestLessEfficientRes(Pair<Int,Quality> wantedResource);
    List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> getResources(Quality q);
    List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> sortResources(List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> lr);
    Unit releaseRes(List<Int> ids);
    Unit print();
}

class ResourceManager implements ResourceManager {
    Map<Int, Pair<Availability, Pair<Int,Quality>>> resources = map[];
    Int resource_counter = 0;

    Unit print() {

        println(toString(resources));
    }
    List<Int> addRes(List<Pair<Int,Quality>> newResources) {
        List<Int> result = list[];
        foreach (r in newResources) {
            resource_counter = resource_counter + 1;
            resources = insert(resources, Pair(resource_counter, Pair(Free, r)));
            result = Cons(resource_counter, result);
        }
        //println(toString(resources));
        return result;
    }

    List<Int> holdRes(List<Pair<Int,Quality>> wantedResources) {
        List<Int> result = list[];
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        while (result == Nil) {
            foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && fst(q) == fst(snd(snd(entry))) && snd(q) == snd(snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
            }
            if (length(result) != length(wantedResources)) {
                // we did not find all needed resources
                println(`hold retrying: Resources = $this.resources$ We want $wantedResources$`);
                result = Nil;
                lr = this.resources;
                await this.resources != lr;
                lr = this.resources;
            } else {
                // we're happy
                /*
                println("***********************************************");
                println("We have acquired all the requested resources :)");
                println("***********************************************");
                */
                this.resources = lr;
            }
        }

        //println(toString(this.resources));
        return result;
    }

    List<Int> findRes(Pair<Int,Quality> wantedResource)
    {
            List<Int> result = list[];
            Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
            while (result == Nil) {
                //foreach (q in wantedResources) {
                    Bool found = False;
                    foreach (entry in entries(lr)) {
                        if (!found
                            && fst(snd(entry)) == Free
                            && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                        {
                            found = True;
                            result = Cons(fst(entry), result);
                            lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                        }
                    }
                //}
                if (length(result) != 1 ){
                    // we did not find the required resource
                    println(`hold retrying: Resources = $this.resources$ We want $wantedResource$`);
                    result = Nil;
                    lr = this.resources;
                    await this.resources != lr;
                    lr = this.resources;
                } else {
                    // we're happy
                    /*
                    println("***********************************************");
                    println("We have acquired the requested resource :)");
                    println("***********************************************");
                    */
                    this.resources = lr;
                }
            }

            //println(toString(this.resources));
            return result;
        }
    List<Int> findMoreEfficientRes(Pair<Int,Quality> wantedResource) // when all required resources are not available
    {
        List<Int> result = Nil;
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        //while (result == Nil) {
            //foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
            //}
            if (length(result) != 1 ){
                // we did not find the required resource
                found = False;
                foreach (entry in entries(lr)) {
                    if (!found && fst(snd(entry)) == Free
                        && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        if(fst(wantedResource) < fst(snd(snd(entry))))
                        {
                            found = True;
                            result = Cons(fst(entry), result);
                            lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                            //println("***********************************************");
                            //println("We have acquired the more efficient resource :)");
                            //println("***********************************************");
                            this.resources = lr;
                        }
                    }
                }
            } else {
                // we're happy
                /*
                println("***********************************************");
                println("We have acquired the requested resource :)");
                println("***********************************************");
                */
                this.resources = lr;
            }
        //}
        //println(toString(this.resources));
        return result;
    }

    List<Int> findNearestMoreEfficientRes(Pair<Int,Quality> wantedResource) // when all required resources are not available
    {
        List<Int> result = list[];
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> getResList = this.getResources(snd(wantedResource));
        //println("Got Resources");
        //println(toString(getResList));
        List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> resList = this.sortResources(getResList);
        //println("Sorted Resources");
        //println(toString(resList));
        //while (result == Nil) {
            Bool found = False;
            foreach (entry in resList) {
                if (!found
                    && fst(snd(entry)) == Free
                    && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                {
                    found = True;
                    result = Cons(fst(entry), result);
                    lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                }
            }
            if (length(result) != 1 ){
                // we did not find the required resource
                found = False;
                foreach (entry in resList) {
                    if (!found && fst(snd(entry)) == Free
                        && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        if(fst(wantedResource) < fst(snd(snd(entry))))
                        {
                            found = True;
                            result = Cons(fst(entry), result);
                            lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                            /*
                            println("***********************************************");
                            println("We have acquired the nearest more efficient resource :)");
                            println("***********************************************");
                            */
                            this.resources = lr;
                        }
                    }
                }
            } else {
                // we're happy
                /*
                println("***********************************************");
                println("We have acquired the requested resource :)");
                println("***********************************************");
                */
                this.resources = lr;
            }
        //}
        //println(toString(this.resources));
        return result;
    }
    List<Int> findLessEfficientRes(Pair<Int,Quality> wantedResource) // when all required resources are not available
    {
        List<Int> result = Nil;
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        //while (result == Nil) {
            //foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
            //}
            if (length(result) != 1 ){
                // we did not find the required resource
                found = False;
                foreach (entry in entries(lr)) {
                    if (!found && fst(snd(entry)) == Free
                        && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        if(fst(wantedResource) > fst(snd(snd(entry))))
                        {
                            found = True;
                            result = Cons(fst(entry), result);
                            lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                            /*
                            println("***********************************************");
                            println("We have acquired the less efficient resource :)");
                            println("***********************************************");
                            */
                            this.resources = lr;
                        }
                    }
                }
            } else {
                // we're happy
                /*
                println("***********************************************");
                println("We have acquired the requested resource :)");
                println("***********************************************");
                */
                this.resources = lr;
            }
            //}
            //println(toString(this.resources));
            return result;
        }

        List<Pair<Int,Int>> findNearestLessEfficientRes(Pair<Int,Quality> wantedResource) // when all required resources are not available
        {
            List<Pair<Int,Int>> result = list[];
            Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
            List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> getResList = this.getResources(snd(wantedResource));
            //println("Got Resources");
            //println(toString(getResList));
            List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> resList = this.sortResources(getResList);
            //println("Sorted Resources");
            //println(toString(resList));
            resList = reverse(resList);
            //println("Reversed Resources");
            //println(toString(resList));
            //while (result == Nil) {
                Bool found = False;
                foreach (entry in resList) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(Pair(fst(entry),fst(snd(snd(entry)))), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
                if (length(result) != 1 ){
                    // we did not find the required resource
                    found = False;
                    foreach (entry in resList) {
                        if (!found && fst(snd(entry)) == Free
                            && snd(wantedResource) == snd(snd(snd(entry))))
                        {
                            if(fst(wantedResource) > fst(snd(snd(entry))))
                            {
                                found = True;
                                result = Cons(Pair(fst(entry),fst(snd(snd(entry)))), result);
                                lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                                /*
                                println("***********************************************");
                                println("We have acquired the nearest less efficient resource :)");
                                println("***********************************************");
                                */
                                this.resources = lr;
                            }
                        }
                    }
                } else {
                    // we're happy
                    /*
                    println("***********************************************");
                    println("We have acquired the requested resource :)");
                    println("***********************************************");
                    */
                    this.resources = lr;
                }
            //}
            //println(toString(this.resources));
            return result;
        }
    List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> getResources(Quality q)
    {
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> mapToList = list(Nil);
        foreach (entry in entries(lr)) {
            if (q == snd(snd(snd(entry))))
            {
                mapToList = appendright(mapToList, entry);
            }
        }
        return mapToList;
    }

    List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> sortResources(List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> lr)
    {
        List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> mapToList = list(Nil);
        foreach (c in lr) {
        if ( isEmpty(mapToList) ){
              mapToList = appendright(mapToList, c);
            } else {
              Int i = 0;
              List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> left = list(Nil);
              List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> right = list(Nil);
              List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> mid = list(Nil);
              Bool flag = True;
              while (( i < length(mapToList) )) {
                if(fst(snd(snd(nth(mapToList, i)))) <= fst(snd(snd(c)))){
                  left = appendright(left, nth(mapToList, i));
                } else {
                  while (( i < length(mapToList) )) {
                    right = appendright(right, nth(mapToList, i));
                    i = ( i + 1 );
                  }
                  mid = appendright(mid, c);
                  mapToList = concatenate(left, concatenate(mid, right));
                  flag = False;
                }
                i = ( i + 1 );
              }
              if ( ( flag == True ) ){
                mapToList = appendright(left, c);
              }
            }
        }
        return mapToList;
    }

    Unit releaseRes(List<Int> ids) {
        Set<Int> all_ids = keys(resources);
        foreach (id in ids) {
            if (contains(all_ids, id)) {
                Pair<Availability, Pair<Int,Quality> > entry = lookupUnsafe(resources, id);
                resources = put(resources, id, Pair(Free, snd(entry)));
            }
        }
        /*
        println("***********************************************");
        println("We have released all the acquired resources :)");
        println("***********************************************");
        */
        //println(toString(this.resources));
    }
}

// ABS does not support disjunction between future return tests (await f1? || await f2?)
// The following code is a syntactic sugar for the disjunction between the return tests.
// The code is not generic, supports only futures of integer type (Fut<Int>).

interface AwaitFut
{
    Unit awaitFut(List<Fut<Int>> fut);
    Bool checkFut();
}
class AwaitFut implements AwaitFut
{
    Bool resolved = False;
    Unit awaitFut(List<Fut<Int>> fut)
    {
        try {
            if(!isEmpty(fut)){
               foreach(f in fut)
               {
                   await f?;
               }
               resolved = True;
               println("Future Resolved:)");
            }
        } catch {
            NullPointerException  => println(`Future is not initialized`);
        }
    }
    Bool checkFut()
    {
        return resolved;
    }
}
module Rescue;
import * from ABS.ResourceManager;

import * from ABS.StdLib;

interface Police {
  Int alarm(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h);
  Int repEmgInfo(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h);
  Int rushToSite(ResourceManager rm);
  Int dealSituation(ResourceManager rm);
  Int evacuation(ResourceManager rm);
  Int rescue(ResourceManager rm);}

class Police implements Police {
  List<Int> rid = list(Nil);
  Int alarm(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h){
    Int x = 0;
    this.rid = await rm!holdRes(list[Pair(40,PoliceMan),Pair(40,PoliceMan),Pair(40,PoliceMan),Pair(40,PoliceMan),Pair(40,PoliceMan),Pair(40,PoliceMan),
    Pair(100,SmokeMask),Pair(100,SmokeMask),Pair(100,SmokeMask),Pair(100,SmokeMask),
    Pair(100,SmokeMask),Pair(100,SmokeMask)]);
    //print(toString(now()) + ",");
    print(toString(this.rid) + ",");
    [Deadline: Duration(75)]    x = this.repEmgInfo(rm,ecc, eod, fb, h);
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "alarm" have missed the deadline.`);
    }
    return 0;
  }
  Int repEmgInfo(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h){
    Police p1 = new Police();
    Police p2 = new Police();
    Fut<Int> f1;
    Fut<Int> f2;
    Fut<Int> f3;
    Fut<Int> f4;
    Int x = 0;
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(40,Clerk)]);
    duration(5,5);
    await rm!releaseRes(temp);
    print(toString(now()) + ",");
    print(toString(temp) + ",");
    [Deadline: Duration(90)]    f1 = ecc!estEmgCtr(rm);
    [Deadline: Duration(25)]    x = this.rushToSite(rm);
    [Deadline: Duration(25)]    f2 = p1!dealSituation(rm);
    [Deadline: Duration(25)]    f3 = p2!evacuation(rm);
    [Deadline: Duration(25)]    x = this.rescue(rm);
    await f1?;
    await f2?;
    await f3?;
    [Deadline: Duration(100)]    f4 = ecc!makeEmgPlan(rm,eod, fb, h);
    await f4?;
    await rm!releaseRes(rid);

    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "repEmgInfo" have missed the deadline.`);
    }
    return 0;
  }
  Int rushToSite(ResourceManager rm){
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(30,Ferry)]);
    duration(20, 20);
    await rm!releaseRes(temp);
    print(toString(now()) + ",");
    print(toString(temp) + ",");
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "rushToSite" have missed the deadline.`);
    }
    return 0;
  }
  Int dealSituation(ResourceManager rm){
    duration(20, 20);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "dealSituation" have missed the deadline.`);
    }
    return 0;
  }
  Int evacuation(ResourceManager rm){
    duration(20, 20);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "evacuation" have missed the deadline.`);
    }
    return 0;
  }
  Int rescue(ResourceManager rm){
    duration(20, 20);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "rescue" have missed the deadline.`);
    }
    return 0;
  }
  }

interface ECC {
  Int estEmgCtr(ResourceManager rm);
  Int makeEmgPlan(ResourceManager rm,EOD eod, FB fb, Hospital h);
  Int doMediaCoverage(ResourceManager rm);}

class ECC implements ECC {

  Int estEmgCtr(ResourceManager rm){
    duration(50, 50);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "estEmgCtr" have missed the deadline.`);
    }
    return 0;
  }
  Int makeEmgPlan(ResourceManager rm,EOD eod, FB fb, Hospital h){
    Int x = 0;Fut<Int> f1;Fut<Int> f2;Fut<Int> f3;
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(40,Clerk)]);
    duration(5,5);
    await rm!releaseRes(temp);
    print(toString(now()) + ",");
    print(toString(temp) + ",");
    [Deadline: Duration(50)]    f1 = eod!start(rm);
    [Deadline: Duration(90)]    f2 = fb!start(rm);
    [Deadline: Duration(80)]    f3 = h!start(rm);
    await f1?;
    await f2?;
    await f3?;
    [Deadline: Duration(100)]    x = this.doMediaCoverage(rm);
    //println("Plan Done");
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "makeEmgPlan" have missed the deadline.`);
    }
    return 0;
  }
  Int doMediaCoverage(ResourceManager rm){
    duration(2);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "doMediaCoverage" have missed the deadline.`);
    }
    return 0;
  }
  }

interface EOD {
  Int start(ResourceManager rm);
  Int rushToSite(ResourceManager rm);
  Int searchEOD(ResourceManager rm);
  Int reportEOD(ResourceManager rm);}

class EOD implements EOD {
  List<Int> rid = list(Nil);
  Int start(ResourceManager rm){
    Int x = 0;
    this.rid = await rm!holdRes(list[Pair(40,EODTech),Pair(40,EODTech)]);
    //print(toString(now()) + ",");
    print(toString(rid) + ",");
    [Deadline: Duration(25)]    x = this.rushToSite(rm);
    [Deadline: Duration(15)]    x = this.searchEOD(rm);
    [Deadline: Duration(10)]    x = this.reportEOD(rm);
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "start" have missed the deadline.`);
    }
    return 0;
  }
  Int rushToSite(ResourceManager rm){
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(30,Ferry)]);
    duration(20, 20);
    await rm!releaseRes(temp);
    print(toString(now()) + ",");
    print(toString(temp) + ",");
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "rushToSite" have missed the deadline.`);
    }
    return 0;
  }
  Int searchEOD(ResourceManager rm){
    duration(10, 10);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "searchEOD" have missed the deadline.`);
    }
    return 0;
  }
  Int reportEOD(ResourceManager rm){
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(40,Clerk)]);
    duration(5,5);
    await rm!releaseRes(temp);
    print(toString(now()) + ",");
    print(toString(temp) + ",");
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "reportEOD" have missed the deadline.`);
    }
    return 0;
  }
  }

interface FB {
  Int start(ResourceManager rm);
  Int rushToSite(ResourceManager rm);
  Int fightFire(ResourceManager rm);
  Int mitigate(ResourceManager rm);
  Int recoverSite(ResourceManager rm);
  Int reportFireRescue(ResourceManager rm);}

class FB implements FB {
  List<Int> rid = list(Nil);
  Int start(ResourceManager rm){
    Int x = 0;FB fb1 = new FB();Fut<Int> f1;
    this.rid = await rm!holdRes(list[Pair(40,FireFighter),Pair(40,FireFighter),Pair(40,FireFighter),
    Pair(40,FireFighter),Pair(40,FireFighter),Pair(40,FireFighter),
    Pair(40,FireExt),Pair(40,FireExt),Pair(40,FireExt),Pair(40,FireExt),
    Pair(40,FireExt),Pair(40,FireExt)]);
    //print(toString(now()) + ",");
    print(toString(rid) + ",");
    [Deadline: Duration(25)]    x = this.rushToSite(rm);
    [Deadline: Duration(35)]    x = this.fightFire(rm);
    [Deadline: Duration(15)]    f1 = fb1!mitigate(rm);
    [Deadline: Duration(35)]    x = this.recoverSite(rm);
    await f1?;
    [Deadline: Duration(25)]    x = this.reportFireRescue(rm);
    await rm!releaseRes(rid);
    print(toString(now()) + ",");
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "start" have missed the deadline.`);
    }
    return 0;
  }
  Int rushToSite(ResourceManager rm){
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(30,Ferry)]);
    duration(20, 20);
    await rm!releaseRes(temp);
    print(toString(now()) + ",");
    print(toString(temp) + ",");
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "rushToSite" have missed the deadline.`);
    }
    return 0;
  }
  Int fightFire(ResourceManager rm){
    duration(25,25);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "fightFire" have missed the deadline.`);
    }
    return 0;
  }
  Int mitigate(ResourceManager rm){
    duration(10, 10);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "mitigate" have missed the deadline.`);
    }
    return 0;
  }
  Int recoverSite(ResourceManager rm){
    duration(2, 2);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "recoverSite" have missed the deadline.`);
    }
    return 0;
  }
  Int reportFireRescue(ResourceManager rm){
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(40,Clerk)]);
    duration(5,5);
    await rm!releaseRes(temp);
    print(toString(now()) + ",");
    print(toString(temp) + ",");
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "reportFireRescue" have missed the deadline.`);
    }
    return 0;
  }
  }

interface Hospital {
  Int start(ResourceManager rm);
  Int rushToSite(ResourceManager rm);
  Int shuntWounded(ResourceManager rm);
  Int treatSliInj(ResourceManager rm);
  Int treatSevInj(ResourceManager rm);
  Int reportMedRescue(ResourceManager rm);}

class Hospital implements Hospital {
  List<Int> rid = list(Nil);
  Int start(ResourceManager rm){
    Int x = 0;
    Hospital h1 = new Hospital();
    Fut<Int> f1;
    this.rid = await rm!holdRes(list[Pair(40,Doctor),Pair(40,Doctor),Pair(40,Doctor),
    Pair(40,Doctor),Pair(40,Doctor),Pair(40,Doctor),Pair(40,FirstAidBox),Pair(40,FirstAidBox),
    Pair(40,FirstAidBox),Pair(40,FirstAidBox),Pair(40,FirstAidBox),Pair(40,FirstAidBox)]);
    print(toString(rid) + ",");
    [Deadline: Duration(25)]    x = this.rushToSite(rm);
    [Deadline: Duration(25)]    x = this.shuntWounded(rm);
    [Deadline: Duration(25)]    f1 = h1!treatSliInj(rm);
    [Deadline: Duration(25)]    x = this.treatSevInj(rm);
    await f1?;
    [Deadline: Duration(10)]    x = this.reportMedRescue(rm);
    await rm!releaseRes(rid);
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "start" have missed the deadline.`);
    }
    return 0;
  }
  Int rushToSite(ResourceManager rm){
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(30,Ferry)]);
    duration(20, 20);
    await rm!releaseRes(temp);
    print(toString(now()) + ",");
    print(toString(temp) + ",");
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "rushToSite" have missed the deadline.`);
    }
    return 0;
  }
  Int shuntWounded(ResourceManager rm){
    duration(10, 10);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "shuntWounded" have missed the deadline.`);
    }
    return 0;
  }
  Int treatSliInj(ResourceManager rm){
    duration(10, 10);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "treatSliInj" have missed the deadline.`);
    }
    return 0;
  }
  Int treatSevInj(ResourceManager rm){
    duration(10, 10);try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "treatSevInj" have missed the deadline.`);
    }
    return 0;
  }
  Int reportMedRescue(ResourceManager rm){
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(40,Clerk)]);
    duration(5,5);
    await rm!releaseRes(temp);
    print(toString(now()) + ",");
    print(toString(temp) + ",");
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => println(`The method "reportMedRescue" have missed the deadline.`);
    }
    return 0;
  }
  }


{
  ResourceManager rm = new ResourceManager();
  await rm!addRes(list[Pair(20,Doctor), Pair(20,Doctor),Pair(20,Doctor), Pair(20,Doctor),Pair(20,Doctor), Pair(20,Doctor),
   Pair(30,Ferry), Pair(100,SmokeMask), Pair(100,SmokeMask), Pair(100,SmokeMask), Pair(100,SmokeMask), Pair(100,SmokeMask), Pair(100,SmokeMask),
   Pair(40,PoliceMan),Pair(40,PoliceMan),Pair(40,PoliceMan),Pair(40,PoliceMan),Pair(40,PoliceMan),Pair(40,PoliceMan),
   Pair(40,EODTech),Pair(40,EODTech), Pair(40,Clerk),
   Pair(40,FireFighter), Pair(40,FireFighter), Pair(40,FireFighter),Pair(40,FireFighter),Pair(40,FireFighter),Pair(40,FireFighter),
   Pair(40,FireExt),Pair(40,FireExt),Pair(40,FireExt),Pair(40,FireExt),Pair(40,FireExt),Pair(40,FireExt),
   Pair(40,Doctor),Pair(40,Doctor),Pair(40,Doctor),Pair(40,Doctor),Pair(40,Doctor),Pair(40,Doctor),
   Pair(40,FirstAidBox),Pair(40,FirstAidBox),Pair(40,FirstAidBox),Pair(40,FirstAidBox),Pair(40,FirstAidBox),Pair(40,FirstAidBox)]);
  Police p = new Police();
  ECC ecc = new ECC();
  EOD eod = new EOD();
  FB fb = new FB();
  Hospital h = new Hospital();
  Fut<Int> f;
  [Deadline: Duration(300)]  f = p!alarm(rm,ecc, eod, fb, h);
  await f?;
  //println("Cool Job Done");
  println(( ( "Time: " + toString(now()) ) + "" ));
}
