module ABS.ResourceManager;
import * from ABS.StdLib;
export *;
data Quality = Ferry | Doctor | SmokeMask | PoliceMan | Clerk | EODTech | FireFighter | FireExt | FirstAidBox;

// Resource Management
// Translation fetches resources from the database and store them in a resource map in the ABS program.
// The following code helps to add, acquire and release the resources.
data Availability = Free | Busy;
interface ResourceManager {
    List<Int> addRes(List<Pair<Int,Quality>> newResources);
    List<Int> holdRes(List<Pair<Int,Quality>> wantedResources);
    List<Int> findRes(Pair<Int,Quality> wantedResource);
    List<Int> findMoreEfficientRes(Pair<Int,Quality> wantedResource);
    List<Pair<Int,Int>> findNearestMoreEfficientRes(Pair<Int,Quality> wantedResource);
    List<Int> findLessEfficientRes(Pair<Int,Quality> wantedResource);
    List<Pair<Int,Int>> findNearestLessEfficientRes(Pair<Int,Quality> wantedResource);
    List<Pair<Int,Int>> findNearestRes(Pair<Int,Quality> wantedResource);
    List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> getResources(Quality q);
    List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> sortResources(List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> lr);
    Unit releaseRes(List<Int> ids);
    Unit print();
    Unit updateCost(Int x);
    Unit updateEfficiency();
}

class ResourceManager implements ResourceManager {
    Int cst = 0;
    Map<Int, Pair<Availability, Pair<Int,Quality>>> resources = map[];
    Int resource_counter = 0;
    Unit updateEfficiency()
    {
        foreach (entry in entries(this.resources)) {
            if (fst(snd(entry)) == Free && snd(snd(snd(entry))) != Ferry)
            {
                Pair<Int,Quality> p = snd(snd(entry));
                Pair<Int,Quality> p1 = Pair(random(50)+50,snd(p));
                this.resources = put(this.resources, fst(entry), Pair(Free,p1));
            }
        }
    }
    Unit print() {
        print(`;Cost = %$cst$`);
    }
    List<Int> addRes(List<Pair<Int,Quality>> newResources) {
        List<Int> result = list[];
        foreach (r in newResources) {
            resource_counter = resource_counter + 1;
            resources = insert(resources, Pair(resource_counter, Pair(Free, r)));
            result = Cons(resource_counter, result);
        }
        //print(toString(resources));
        return result;
    }

    List<Int> holdRes(List<Pair<Int,Quality>> wantedResources) {
        List<Int> result = list[];
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        while (result == Nil) {
            foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && fst(q) == fst(snd(snd(entry))) && snd(q) == snd(snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
            }
            if (length(result) != length(wantedResources)) {
                // we did not find all needed resources
                print(`;hold retrying: Resources = $this.resources$ We want $wantedResources$`);
                result = Nil;
                lr = this.resources;
                await this.resources != lr;
                lr = this.resources;
            } else {
                // we're happy
                /*
                print("***********************************************");
                print("We have acquired all the requested resources :)");
                print("***********************************************");
                */
                this.resources = lr;
            }
        }

        //print(toString(this.resources));
        return result;
    }

    List<Int> findRes(Pair<Int,Quality> wantedResource)
    {
            List<Int> result = list[];
            Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
            while (result == Nil) {
                //foreach (q in wantedResources) {
                    Bool found = False;
                    foreach (entry in entries(lr)) {
                        if (!found
                            && fst(snd(entry)) == Free
                            && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                        {
                            found = True;
                            result = Cons(fst(entry), result);
                            lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                        }
                    }
                //}
                if (length(result) != 1 ){
                    // we did not find the required resource
                    print(`;hold retrying: Resources = $this.resources$ We want $wantedResource$`);
                    result = Nil;
                    lr = this.resources;
                    await this.resources != lr;
                    lr = this.resources;
                } else {
                    // we're happy
                    /*
                    print("***********************************************");
                    print("We have acquired the requested resource :)");
                    print("***********************************************");
                    */
                    this.resources = lr;
                }
            }

            //print(toString(this.resources));
            return result;
        }
    List<Int> findMoreEfficientRes(Pair<Int,Quality> wantedResource) // when all required resources are not available
    {
        List<Int> result = Nil;
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        //while (result == Nil) {
            //foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
            //}
            if (length(result) != 1 ){
                // we did not find the required resource
                found = False;
                foreach (entry in entries(lr)) {
                    if (!found && fst(snd(entry)) == Free
                        && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        if(fst(wantedResource) < fst(snd(snd(entry))))
                        {
                            found = True;
                            result = Cons(fst(entry), result);
                            lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                            //print("***********************************************");
                            //print("We have acquired the more efficient resource :)");
                            //print("***********************************************");
                            this.resources = lr;
                        }
                    }
                }
            } else {
                // we're happy
                /*
                print("***********************************************");
                print("We have acquired the requested resource :)");
                print("***********************************************");
                */
                this.resources = lr;
            }
        //}
        //print(toString(this.resources));
        return result;
    }

    List<Pair<Int,Int>> findNearestMoreEfficientRes(Pair<Int,Quality> wantedResource) // when all required resources are not available
    {
        List<Pair<Int,Int>> result = list[];
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> getResList = this.getResources(snd(wantedResource));
        //print("Got Resources");
        //print(toString(getResList));
        List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> resList = this.sortResources(getResList);
        //print("Sorted Resources");
        //print(toString(resList));
        //while (result == Nil) {
            Bool found = False;
            foreach (entry in resList) {
                if (!found
                    && fst(snd(entry)) == Free
                    && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                {
                    found = True;
                    result = Cons(Pair(fst(entry),fst(snd(snd(entry)))), result);
                    lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                }
            }
            if (length(result) != 1 ){
                // we did not find the required resource
                found = False;
                foreach (entry in resList) {
                    if (!found && fst(snd(entry)) == Free
                        && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        if(fst(wantedResource) < fst(snd(snd(entry))))
                        {
                            found = True;
                            result = Cons(Pair(fst(entry),fst(snd(snd(entry)))), result);
                            lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                            /*
                            print("***********************************************");
                            print("We have acquired the nearest more efficient resource :)");
                            print("***********************************************");
                            */
                            this.resources = lr;
                        }
                    }
                }
            } else {
                // we're happy
                /*
                print("***********************************************");
                print("We have acquired the requested resource :)");
                print("***********************************************");
                */
                this.resources = lr;
            }
        //}
        //print(toString(this.resources));
        return result;
    }
    List<Int> findLessEfficientRes(Pair<Int,Quality> wantedResource) // when all required resources are not available
    {
        List<Int> result = Nil;
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        //while (result == Nil) {
            //foreach (q in wantedResources) {
                Bool found = False;
                foreach (entry in entries(lr)) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(fst(entry), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
            //}
            if (length(result) != 1 ){
                // we did not find the required resource
                found = False;
                foreach (entry in entries(lr)) {
                    if (!found && fst(snd(entry)) == Free
                        && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        if(fst(wantedResource) > fst(snd(snd(entry))))
                        {
                            found = True;
                            result = Cons(fst(entry), result);
                            lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                            /*
                            print("***********************************************");
                            print("We have acquired the less efficient resource :)");
                            print("***********************************************");
                            */
                            this.resources = lr;
                        }
                    }
                }
            } else {
                // we're happy
                /*
                print("***********************************************");
                print("We have acquired the requested resource :)");
                print("***********************************************");
                */
                this.resources = lr;
            }
            //}
            //print(toString(this.resources));
            return result;
        }

        List<Pair<Int,Int>> findNearestLessEfficientRes(Pair<Int,Quality> wantedResource) // when all required resources are not available
        {
            List<Pair<Int,Int>> result = list[];
            Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
            List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> getResList = this.getResources(snd(wantedResource));
            //print("Got Resources");
            //print(toString(getResList));
            List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> resList = this.sortResources(getResList);
            //print("Sorted Resources");
            //print(toString(resList));
            resList = reverse(resList);
            //print("Reversed Resources");
            //print(toString(resList));
            //while (result == Nil) {
                Bool found = False;
                foreach (entry in resList) {
                    if (!found
                        && fst(snd(entry)) == Free
                        && fst(wantedResource) == fst(snd(snd(entry))) && snd(wantedResource) == snd(snd(snd(entry))))
                    {
                        found = True;
                        result = Cons(Pair(fst(entry),fst(snd(snd(entry)))), result);
                        lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                    }
                }
                if (length(result) != 1 ){
                    // we did not find the required resource
                    found = False;
                    foreach (entry in resList) {
                        if (!found && fst(snd(entry)) == Free
                            && snd(wantedResource) == snd(snd(snd(entry))))
                        {
                            if(fst(wantedResource) > fst(snd(snd(entry))))
                            {
                                found = True;
                                result = Cons(Pair(fst(entry),fst(snd(snd(entry)))), result);
                                lr = put(lr, fst(entry), Pair(Busy, snd(snd(entry))));
                                /*
                                print("***********************************************");
                                print("We have acquired the nearest less efficient resource :)");
                                print("***********************************************");
                                */
                                this.resources = lr;
                            }
                        }
                    }
                } else {
                    // we're happy
                    /*
                    print("***********************************************");
                    print("We have acquired the requested resource :)");
                    print("***********************************************");
                    */
                    this.resources = lr;
                }
            //}
            //print(toString(this.resources));
            return result;
        }
    List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> getResources(Quality q)
    {
        Map<Int, Pair<Availability, Pair<Int,Quality>>> lr = this.resources;
        List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> mapToList = list(Nil);
        foreach (entry in entries(lr)) {
            if (q == snd(snd(snd(entry))))
            {
                mapToList = appendright(mapToList, entry);
            }
        }
        return mapToList;
    }

    List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> sortResources(List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> lr)
    {
        List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> mapToList = list(Nil);
        foreach (c in lr) {
        if ( isEmpty(mapToList) ){
              mapToList = appendright(mapToList, c);
            } else {
              Int i = 0;
              List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> left = list(Nil);
              List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> right = list(Nil);
              List<Pair<Int,Pair<Availability, Pair<Int,Quality>>>> mid = list(Nil);
              Bool flag = True;
              while (( i < length(mapToList) )) {
                if(fst(snd(snd(nth(mapToList, i)))) <= fst(snd(snd(c)))){
                  left = appendright(left, nth(mapToList, i));
                } else {
                  while (( i < length(mapToList) )) {
                    right = appendright(right, nth(mapToList, i));
                    i = ( i + 1 );
                  }
                  mid = appendright(mid, c);
                  mapToList = concatenate(left, concatenate(mid, right));
                  flag = False;
                }
                i = ( i + 1 );
              }
              if ( ( flag == True ) ){
                mapToList = appendright(left, c);
              }
            }
        }
        return mapToList;
    }
    List<Pair<Int,Int>> findNearestRes(Pair<Int,Quality> wantedResource)
    {
        List<Pair<Int,Int>> r = list(Nil);
        while(isEmpty(r)){
            this.updateEfficiency();
            r = this.findNearestMoreEfficientRes(wantedResource);
            if(isEmpty(r))
                r = this.findNearestLessEfficientRes(wantedResource);
        }
        /*
        foreach(q in r)
        {
            this.cst = this.cst + snd(q);
        }
        */
        return r;
    }
    Unit releaseRes(List<Int> ids) {
        Set<Int> all_ids = keys(resources);
        foreach (id in ids) {
            if (contains(all_ids, id)) {
                Pair<Availability, Pair<Int,Quality> > entry = lookupUnsafe(resources, id);
                resources = put(resources, id, Pair(Free, snd(entry)));
            }
        }
        /*
        print("***********************************************");
        print("We have released all the acquired resources :)");
        print("***********************************************");
        */
        //print(toString(this.resources));
    }
    Unit updateCost(Int x)
    {
        this.cst = this.cst + x;
    }
}

// ABS does not support disjunction between future return tests (await f1? || await f2?)
// The following code is a syntactic sugar for the disjunction between the return tests.
// The code is not generic, supports only futures of integer type (Fut<Int>).

interface AwaitFut
{
    Unit awaitFut(List<Fut<Int>> fut);
    Bool checkFut();
}
class AwaitFut implements AwaitFut
{
    Bool resolved = False;
    Unit awaitFut(List<Fut<Int>> fut)
    {
        try {
            if(!isEmpty(fut)){
               foreach(f in fut)
               {
                   await f?;
               }
               resolved = True;
               print("Future Resolved:)");
            }
        } catch {
            NullPointerException  => print(`;Future is not initialized`);
        }
    }
    Bool checkFut()
    {
        return resolved;
    }
}
module Rescue;
import * from ABS.ResourceManager;

import * from ABS.StdLib;

interface Police {
  Int alarm(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h);
  Int repEmgInfo(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h);
  Int rushToSite(ResourceManager rm);
  Int dealSituation(ResourceManager rm);
  Int evacuation(ResourceManager rm);
  Int rescue(ResourceManager rm);}

class Police implements Police {
  List<Pair<Int,Int>> rid = Nil;
  Int alarm(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h){
    Int x = 0;
    [Deadline: Duration(300)]    x = this.repEmgInfo(rm,ecc, eod, fb, h);
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "alarm" have missed the deadline.`);
    }
    return 0;
  }
  Int repEmgInfo(ResourceManager rm,ECC ecc, EOD eod, FB fb, Hospital h){
    Police p1 = new Police();
    Police p2 = new Police();
    Fut<Int> f1;
    Fut<Int> f2;
    Fut<Int> f3;
    Fut<Int> f4;
    Int x = 0;
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(40,Clerk)]);
    Int y = random(4)+1)*10;
    await rm!updateCost(30*y);
    duration(y);
    await rm!releaseRes(temp);
    print(`;Emergency information report finished at time = `);
    print(toString(now()));
    print(`;Clerk acquired for emergency information report = `);
    print(toString(temp));
    [Deadline: Duration(50)]    f1 = ecc!estEmgCtr(rm);
    [Deadline: Duration(50)]    x = this.rushToSite(rm);
    [Deadline: Duration(25)]    f2 = p1!dealSituation(rm);
    [Deadline: Duration(25)]    f3 = p2!evacuation(rm);
    [Deadline: Duration(25)]    x = this.rescue(rm);
    await f1?;
    await f2?;
    await f3?;
    [Deadline: Duration(150)]    f4 = ecc!makeEmgPlan(rm,eod, fb, h);
    await f4?;
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "repEmgInfo" have missed the deadline.`);
    }
    return 0;
  }
  Int rushToSite(ResourceManager rm){
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(30,Ferry)]);
    Int y = random(4)+1)*10;
    await rm!updateCost(30*y);
    duration(y);
    await rm!releaseRes(temp);
    print(`;Ferry acquired to take police to site = `);
    print(toString(temp));
    print(`;Police reached the site at time = `);
    print(toString(now()));

    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "rushToSite" have missed the deadline.`);
    }
    return 0;
  }
  Int dealSituation(ResourceManager rm){
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of Deal_with_Scene = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for Police to finish Deal_with_Scene = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required police resource efficiency for Deal_with_Scene = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,PoliceMan));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more policemen.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by Police for Deal_with_Scene = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the Policeman, to meet the deadline please add Policemen having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of police resources for Deal_with_Scene = ` + toString(this.rid) );
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;Police finished the task Deal_with_Scene at time = `);
    print(toString(now()));
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "dealSituation" have missed the deadline.`);
    }
    return 0;
  }
  Int evacuation(ResourceManager rm){
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of Evacuation = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for Police to finish Evacuation = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required police resource efficiency for Evacuation = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,PoliceMan));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more policemen.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by Police for Evacuation = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the Policeman, to meet the deadline please add Policemen having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of police resources for Evacuation = ` + toString(this.rid));
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;Police finished the task Evacuation at time = `);
    print(toString(now()));
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "evacuation" have missed the deadline.`);
    }
    return 0;
  }
  Int rescue(ResourceManager rm){
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of Rescue = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for Police to finish Rescue = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required police resource efficiency for Rescue = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,PoliceMan));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more policemen.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by Police for Rescue = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the Policeman, to meet the deadline please add Policemen having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of police resources for Rescue = ` + toString(this.rid));
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;Police finished the task Rescue at time = `);
    print(toString(now()));
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "rescue" have missed the deadline.`);
    }
    return 0;
  }
  }

interface ECC {
  Int estEmgCtr(ResourceManager rm);
  Int makeEmgPlan(ResourceManager rm,EOD eod, FB fb, Hospital h);
  Int doMediaCoverage(ResourceManager rm);}

class ECC implements ECC {
  List<Pair<Int,Int>> rid = Nil;
  Int estEmgCtr(ResourceManager rm){
    duration((random(3)));
    print(`;Emergency center established at time = `);
    print(toString(now()));
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "estEmgCtr" have missed the deadline.`);
    }
    return 0;
  }
  Int makeEmgPlan(ResourceManager rm,EOD eod, FB fb, Hospital h){
    Int x = 0;Fut<Int> f1;Fut<Int> f2;Fut<Int> f3;
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of makeEmgPlan = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for Clerk to finish makeEmgPlan = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required Clerk resource efficiency for makeEmgPlan = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,Clerk));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more Clerks.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by Clerks for makeEmgPlan = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the Clerk, to meet the deadline please add Clerks having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of Clerk resources for makeEmgPlan = ` + toString(this.rid));
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;Emergency plan is made at time = `+ toString(now()));
    [Deadline: Duration(100)]    f1 = eod!start(rm);
    [Deadline: Duration(100)]    f2 = fb!start(rm);
    [Deadline: Duration(100)]    f3 = h!start(rm);
    await f1?;
    await f2?;
    await f3?;
    [Deadline: Duration(5)]    x = this.doMediaCoverage(rm);
    //print("Plan Done");
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "makeEmgPlan" have missed the deadline.`);
    }
    return 0;
  }
  Int doMediaCoverage(ResourceManager rm){
    duration(random(3));
    print(`;Media coverage finished at time = ` + toString(now()));
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "doMediaCoverage" have missed the deadline.`);
    }
    return 0;
  }
  }

interface EOD {
  Int start(ResourceManager rm);
  Int rushToSite(ResourceManager rm);
  Int searchEOD(ResourceManager rm);
  Int reportEOD(ResourceManager rm);}

class EOD implements EOD {
  List<Pair<Int,Int>> rid = Nil;
  Int start(ResourceManager rm){
    Int x = 0;
    //this.rid = await rm!holdRes(list[Pair(40,EODTech),Pair(40,EODTech)]);
    //print(toString(now()) + ",");
    //print(toString(rid) + ",");
    [Deadline: Duration(25)]    x = this.rushToSite(rm);
    [Deadline: Duration(15)]    x = this.searchEOD(rm);
    [Deadline: Duration(25)]    x = this.reportEOD(rm);
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "start" have missed the deadline.`);
    }
    return 0;
  }
  Int rushToSite(ResourceManager rm){
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(30,Ferry)]);
    Int y = random(4)+1)*10;
    await rm!updateCost(30*y);
    duration(y);
    await rm!releaseRes(temp);
    print(`;Ferry acquired to take EOD_Tech to site = `);
    print(toString(temp));
    print(`;EOD_Tech reached the site at time = `);
    print(toString(now()));

    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "rushToSite" have missed the deadline.`);
    }
    return 0;
  }
  Int searchEOD(ResourceManager rm){
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of Search_EOD = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for EOD_Tech to finish Search_EOD = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required EOD_Tech resource efficiency for Search_EOD = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,EODTech));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more EOD_Tech.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by EOD_Tech for Search_EOD = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the EOD_Tech, to meet the deadline please add EOD_Tech having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of EOD_Tech resources for Search_EOD = ` + toString(this.rid) );
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;EOD_Tech finished the task Search_EOD at time = `);
    print(toString(now()));
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "searchEOD" have missed the deadline.`);
    }
    return 0;
  }
  Int reportEOD(ResourceManager rm){
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of reportEOD = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for Clerk to finish reportEOD = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required Clerk resource efficiency for reportEOD = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,Clerk));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more Clerks.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by Clerks for reportEOD = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the Clerk, to meet the deadline please add Clerks having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of Clerk resources for reportEOD = ` + toString(this.rid));
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;EOD report finished at time = `);
    print(toString(now()));
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "reportEOD" have missed the deadline.`);
    }
    return 0;
  }
  }
interface FB {
  Int start(ResourceManager rm);
  Int rushToSite(ResourceManager rm);
  Int fightFire(ResourceManager rm);
  Int mitigate(ResourceManager rm);
  Int recoverSite(ResourceManager rm);
  Int reportFireRescue(ResourceManager rm);}

class FB implements FB {
  List<Pair<Int,Int>> rid = list(Nil);
  Int start(ResourceManager rm){
    Int x = 0;FB fb1 = new FB();Fut<Int> f1;
    [Deadline: Duration(25)]    x = this.rushToSite(rm);
    [Deadline: Duration(35)]    x = this.fightFire(rm);
    [Deadline: Duration(15)]    f1 = fb1!mitigate(rm);
    [Deadline: Duration(35)]    x = this.recoverSite(rm);
    await f1?;
    [Deadline: Duration(25)]    x = this.reportFireRescue(rm);
    //await rm!releaseRes(rid);
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(toString(now()) + ",");
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "start" have missed the deadline.`);
    }
    return 0;
  }
  Int rushToSite(ResourceManager rm){
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(30,Ferry)]);
    Int y = random(4)+1)*10;
    await rm!updateCost(30*y);
    duration(y);
    await rm!releaseRes(temp);
    print(`;Ferry acquired to take FireFighter to site = `);
    print(toString(temp));
    print(`;FireFighter reached the site at time = `);
    print(toString(now()));

    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "rushToSite" have missed the deadline.`);
    }
    return 0;
  }
  Int fightFire(ResourceManager rm){
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of Fight_fire = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for FireFighter to finish Fight_fire = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required FireFighter resource efficiency for Fight_fire = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,FireFighter));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more FireFighter.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by FireFighter for Fight_fire = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the FireFighter, to meet the deadline please add FireFighter having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of FireFighter resources for Fight_fire = ` + toString(this.rid));
    //print(toString(this.rid));
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;FireFighter finished the task Fight_fire at time = `);
    print(toString(now()));
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "fightFire" have missed the deadline.`);
    }
    return 0;
  }
  Int mitigate(ResourceManager rm){
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of Mitigate = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for FireFighter to finish Mitigate = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required FireFighter resource efficiency for Mitigate = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,FireFighter));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more FireFighter.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by FireFighter for Mitigate = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the FireFighter, to meet the deadline please add FireFighter having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of FireFighter resources for Mitigate = ` + toString(this.rid));
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;FireFighter finished the task Mitigate at time = `);
    print(toString(now()));
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "mitigate" have missed the deadline.`);
    }
    return 0;
  }
  Int recoverSite(ResourceManager rm){
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of Search_EOD = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for FireFighter to finish Recover_Site = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required FireFighter resource efficiency for Recover_Site = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,FireFighter));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more FireFighter.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by FireFighter for Recover_Site = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the FireFighter, to meet the deadline please add FireFighter having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of FireFighter resources for Recover_Site = ` + toString(this.rid) );
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;FireFighter finished the task Recover_Site at time = `);
    print(toString(now()));
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "recoverSite" have missed the deadline.`);
    }
    return 0;
  }
  Int reportFireRescue(ResourceManager rm){
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of reportFireRescue = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for Clerk to finish reportFireRescue = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required Clerk resource efficiency for reportFireRescue = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,Clerk));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more Clerks.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by Clerks for reportFireRescue = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the Clerk, to meet the deadline please add Clerks having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of Clerk resources for reportFireRescue = ` + toString(this.rid));
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;Fire_Rescue report finished at time = `);
    print(toString(now()));
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "reportFireRescue" have missed the deadline.`);
    }
    return 0;
  }
  }

interface Hospital {
  Int start(ResourceManager rm);
  Int rushToSite(ResourceManager rm);
  Int shuntWounded(ResourceManager rm);
  Int treatSliInj(ResourceManager rm);
  Int treatSevInj(ResourceManager rm);
  Int reportMedRescue(ResourceManager rm);}

class Hospital implements Hospital {
  List<Pair<Int,Int>> rid = list(Nil);
  Int start(ResourceManager rm){
    Int x = 0;
    Hospital h1 = new Hospital();
    Fut<Int> f1;

    [Deadline: Duration(25)]    x = this.rushToSite(rm);
    [Deadline: Duration(25)]    x = this.shuntWounded(rm);
    [Deadline: Duration(25)]    f1 = h1!treatSliInj(rm);
    [Deadline: Duration(20)]    x = this.treatSevInj(rm);
    await f1?;
    [Deadline: Duration(10)]    x = this.reportMedRescue(rm);
    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "start" have missed the deadline.`);
    }
    return 0;
  }
  Int rushToSite(ResourceManager rm){
    List<Int> temp = list(Nil);
    temp = await rm!holdRes(list[Pair(30,Ferry)]);
    Int y = random(4)+1)*10;
    await rm!updateCost(30*y);
    duration(y);
    await rm!releaseRes(temp);
    print(`;Ferry acquired to take Doctor to site = `);
    print(toString(temp));
    print(`;Doctor reached the site at time = `);
    print(toString(now()));

    try {
    Duration d = deadline();
    Rat r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "rushToSite" have missed the deadline.`);
    }
    return 0;
  }
  Int shuntWounded(ResourceManager rm){
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of Shunt_Wounded = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for Doctor to finish Shunt_Wounded = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required Doctor resource efficiency for Shunt_Wounded = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,Doctor));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more Doctor.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by Doctor for Shunt_Wounded = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the Doctor, to meet the deadline please add Doctor having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of Doctor resources for Shunt_Wounded = `+ toString(this.rid) );
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;Doctor finished the task Shunt_Wounded at time = `);
    print(toString(now()));
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "shuntWounded" have missed the deadline.`);
    }
    return 0;
  }
  Int treatSliInj(ResourceManager rm){
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of Treat_Slightly_Injured = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for Doctor to finish Treat_Slightly_Injured = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required Doctor resource efficiency for Treat_Slightly_Injured = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,Doctor));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more Doctor.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by Doctor for Treat_Slightly_Injured = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the Doctor, to meet the deadline please add Doctor having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of Doctor resources for Treat_Slightly_Injured = ` + toString(this.rid));
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;Doctor finished the task Treat_Slightly_Injured at time = `);
    print(toString(now()));
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "treatSliInj" have missed the deadline.`);
    }
    return 0;
  }
  Int treatSevInj(ResourceManager rm){
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of Treat_Slightly_Injured = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for Doctor to finish Treat_Severly_Injured = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required Doctor resource efficiency for Treat_Severly_Injured = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,Doctor));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more Doctor.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by Doctor for Treat_Severly_Injured = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the Doctor, to meet the deadline please add Doctor having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of Doctor resources for Treat_Severly_Injured = ` +toString(this.rid) );
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;Doctor finished the task Treat_Severly_Injured at time = `);
    print(toString(now()));
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "treatSevInj" have missed the deadline.`);
    }
    return 0;
  }
  Int reportMedRescue(ResourceManager rm){
    List<Pair<Int,Int>> temp = Nil;
    Int tl = (random(90)+1)+10;
    print(`;Length of reportMedRescue = $tl$`);
    Duration d = deadline();
    Rat r = durationValue(d);
    Int a = truncate(r);
    print(`;Remaining time for Clerk to finish reportMedRescue = $a$`);
    Int b = 0;
    if (a != 0) {
        b = truncate(tl/a)+1;
    }
    print(`;Required Clerk resource efficiency for reportMedRescue = $b$`);
    Int c = 0;
    while (b > 0 )
    {
        temp = await rm!findNearestRes(Pair(b,Clerk));
        this.rid = concatenate(this.rid,temp);
        if(!isEmpty(temp))
        {
            Pair<Int,Int>  temp1 = head(temp);
            //print(toString(temp1));
            b = b - snd(temp1);
            c = c + snd(temp1);
        }
        else
        {
            print("Please add more Clerks.");
        }
    }
    Int tim= truncate(tl/c)+1;
    print(`;Time taken by Clerks for reportMedRescue = $tim$`);
    if (isEmpty(this.rid))
    {
        print(`;Did not find the Clerk, to meet the deadline please add Clerks having $b$ efficiency`);
    }
    else
    {
        duration(tim);
        //List<Int> rl = Cons(fst(head(this.rid)),Nil);
        //await rm!releaseRes(rl);
    }
    print(`;List of Clerk resources for reportMedRescue = ` + toString(this.rid));
    List<Int> rr = list(Nil);
    while(!isEmpty(this.rid))
    {
        Pair<Int,Int> y = head(this.rid);
        this.rid = tail(this.rid);
        rr = appendright(rr,fst(y));
    }
    await rm!releaseRes(rr);
    print(`;Medical_Rescue report finished at time = `);
    print(toString(now()));

    /*
    try {
    d = deadline();
    r = durationValue(d);
    assert r > 0;
    } catch {
    AssertionFailException => print(`;The method "reportMedRescue" have missed the deadline.`);
    }*/
    return 0;
  }
  }


{
  ResourceManager rm = new ResourceManager();
  await rm!addRes(list[Pair(20,Doctor), Pair(20,Doctor),Pair(20,Doctor), Pair(20,Doctor),Pair(20,Doctor), Pair(20,Doctor),
   Pair(30,Ferry), Pair(30,Ferry), Pair(30,Ferry), Pair(100,SmokeMask), Pair(100,SmokeMask), Pair(100,SmokeMask), Pair(100,SmokeMask), Pair(100,SmokeMask), Pair(100,SmokeMask),
   Pair(40,PoliceMan),Pair(50,PoliceMan),Pair(20,PoliceMan),Pair(45,PoliceMan),Pair(30,PoliceMan),Pair(40,PoliceMan),
   Pair(40,EODTech),Pair(40,EODTech), Pair(40,Clerk),Pair(40,Clerk),Pair(40,Clerk),Pair(40,Clerk),Pair(40,Clerk),
   Pair(40,FireFighter), Pair(40,FireFighter), Pair(40,FireFighter),Pair(40,FireFighter),Pair(40,FireFighter),Pair(40,FireFighter),
   Pair(40,FireExt),Pair(40,FireExt),Pair(40,FireExt),Pair(40,FireExt),Pair(40,FireExt),Pair(40,FireExt),
   Pair(40,Doctor),Pair(40,Doctor),Pair(40,Doctor),Pair(40,Doctor),Pair(40,Doctor),Pair(40,Doctor),
   Pair(40,FirstAidBox),Pair(40,FirstAidBox),Pair(40,FirstAidBox),Pair(40,FirstAidBox),Pair(40,FirstAidBox),Pair(40,FirstAidBox)]);
  Police p = new Police();
  ECC ecc = new ECC();
  EOD eod = new EOD();
  FB fb = new FB();
  Hospital h = new Hospital();
  Fut<Int> f;
  [Deadline: Duration(130)]  f = p!alarm(rm,ecc, eod, fb, h);
  await f?;
  Rat t = timeValue(now());
  Int t1 = truncate(t);
  rm.print();
  println(`%$t1$`);
}
// Nearest efficient
